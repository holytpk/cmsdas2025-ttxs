{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CMSDAS 2024 - Run3 tt Cross Section In this exercise we will perform a measurement of the top quark pair production cross section using ~1 fb-1 of data collected during the early days of LHC Run 3. This exercise was adapted from the measurement TOP-22-012 . About the exercise The exercise will use pepper, an analysis framework started at DESY that was used for the original analysis. Students will learn to work with recently popular columnar analysis strategies in python. The analysis required custom NanoAOD samples skimmed from Winter22 early run 3 CMS Monte Carlo samples. To keep the exercise python-focused and separated from CMSSW, these samples are provided, along with a working but simplified pepper setup. Many things are missing in this setup, which will be added over the course of the exercise, until a measurement can be performed. While the analysis used $t\\bar{t}$ dilepton and lepton+jets decays, the exercise will focus on the dilepton channel for simplicity. Some goals of the exercise are: Understand the basic structure of pepper Make histograms and plots of CMS Run3 data Add new cuts and uncertainties to the analysis perform a fit to measure the cross section using Combine Study the fit outcome, and improve the analysis to obtain the most realistic result possible in the alloted time! About pepper Pepper is a python-based analysis framework designed for CMS data in the nanoAOD format. It uses columnar methods, meaning that it avoids event loops and instead prefers to load data by columnar chunks and use vector/matrix methods to speed up computation time in python. It makes use of methods from coffea and packages in the sci-kit HEP ecosystem, in particular uproot, awkward arrays, and the hist package. Pepper uses dask for job management. The default condor submission options were originally tuned to run on DESY's NAF computing facilities, but it seems fine on LXPLUS as well. It is used by a number of analyses in the DESY CMS Top group and is spreading to other groups in Germany which use the same computing resources. Let\u2019s get started and make the most of your CMSDAS experience!","title":"Home"},{"location":"#cmsdas-2024-run3-tt-cross-section","text":"In this exercise we will perform a measurement of the top quark pair production cross section using ~1 fb-1 of data collected during the early days of LHC Run 3. This exercise was adapted from the measurement TOP-22-012 .","title":"CMSDAS 2024 - Run3 tt Cross Section"},{"location":"#about-the-exercise","text":"The exercise will use pepper, an analysis framework started at DESY that was used for the original analysis. Students will learn to work with recently popular columnar analysis strategies in python. The analysis required custom NanoAOD samples skimmed from Winter22 early run 3 CMS Monte Carlo samples. To keep the exercise python-focused and separated from CMSSW, these samples are provided, along with a working but simplified pepper setup. Many things are missing in this setup, which will be added over the course of the exercise, until a measurement can be performed. While the analysis used $t\\bar{t}$ dilepton and lepton+jets decays, the exercise will focus on the dilepton channel for simplicity. Some goals of the exercise are: Understand the basic structure of pepper Make histograms and plots of CMS Run3 data Add new cuts and uncertainties to the analysis perform a fit to measure the cross section using Combine Study the fit outcome, and improve the analysis to obtain the most realistic result possible in the alloted time!","title":"About the exercise"},{"location":"#about-pepper","text":"Pepper is a python-based analysis framework designed for CMS data in the nanoAOD format. It uses columnar methods, meaning that it avoids event loops and instead prefers to load data by columnar chunks and use vector/matrix methods to speed up computation time in python. It makes use of methods from coffea and packages in the sci-kit HEP ecosystem, in particular uproot, awkward arrays, and the hist package. Pepper uses dask for job management. The default condor submission options were originally tuned to run on DESY's NAF computing facilities, but it seems fine on LXPLUS as well. It is used by a number of analyses in the DESY CMS Top group and is spreading to other groups in Germany which use the same computing resources. Let\u2019s get started and make the most of your CMSDAS experience!","title":"About pepper"},{"location":"example/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Pepper - ParticlE Physics ProcEssoR A python framework for analyzing NanoAODs. Easy to use and highly configurable. The framework is designed to allow analysis of any type of event topology. For reference this repository comes with the necessary tools for a analysis. Installation It is recommended to use a proper environment with Pepper. An example environment setup for DESY NAF can be found here , which can be sourced after cloning the repository. Pepper can be installed as a python package as follows: git clone <repository url> pepper cd pepper source example/environment.sh python3 -m pip install --upgrade --upgrade-strategy eager --editable . # Additionally only if on CentOS7 (e.g. DESY NAF in 2023): python3 -m pip install \"urllib3<2\" This will update all dependencies to the latest version. Now pepper can be imported as any other python package from any location. Because of the --editable option, if you edit files inside your cloned pepper directory, the changes will be in effect already the next time you import pepper . Note : If you are on CentOS7, please run python3 -m pip install \"urllib3<2\" , as written above. CentOS7 is lacking a recent OpenSSL version, thus an older urllib3 version is required. Usage Getting started In Pepper an analysis is implemented as a Processor class. A short example of such a Processor with many explanatory comments can be found in here . This processor can be run by executing python3 -m pepper.runproc example_processor.py example_config.json (when inside the example directory). Also running python -m pepper.runproc -h will show the available command line options.","title":"Welcome to MkDocs"},{"location":"example/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"example/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"example/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"example/#pepper-particle-physics-processor","text":"A python framework for analyzing NanoAODs. Easy to use and highly configurable. The framework is designed to allow analysis of any type of event topology. For reference this repository comes with the necessary tools for a analysis.","title":"Pepper - ParticlE Physics ProcEssoR"},{"location":"example/#installation","text":"It is recommended to use a proper environment with Pepper. An example environment setup for DESY NAF can be found here , which can be sourced after cloning the repository. Pepper can be installed as a python package as follows: git clone <repository url> pepper cd pepper source example/environment.sh python3 -m pip install --upgrade --upgrade-strategy eager --editable . # Additionally only if on CentOS7 (e.g. DESY NAF in 2023): python3 -m pip install \"urllib3<2\" This will update all dependencies to the latest version. Now pepper can be imported as any other python package from any location. Because of the --editable option, if you edit files inside your cloned pepper directory, the changes will be in effect already the next time you import pepper . Note : If you are on CentOS7, please run python3 -m pip install \"urllib3<2\" , as written above. CentOS7 is lacking a recent OpenSSL version, thus an older urllib3 version is required.","title":"Installation"},{"location":"example/#usage","text":"","title":"Usage"},{"location":"example/#getting-started","text":"In Pepper an analysis is implemented as a Processor class. A short example of such a Processor with many explanatory comments can be found in here . This processor can be run by executing python3 -m pepper.runproc example_processor.py example_config.json (when inside the example directory). Also running python -m pepper.runproc -h will show the available command line options.","title":"Getting started"},{"location":"pre-exercise/","text":"Pre-Exercise This section provides the preliminary steps to set up the environment for the CMSDAS 2024 exercises. Follow these instructions carefully to ensure a smooth analysis workflow. Pre-requisites Two installations are required to complete the exercises: Pepper Analysis Framework Combine Fitting Tool Installing Pepper We use a special fork of the Pepper analysis framework for this exercise. Follow these steps: Clone the repository and set up the environment: git clone <repository_url> pepper cd pepper source example/environment.sh Create a Python virtual environment: python -m venv env_pepper source env_pepper/bin/activate export PYTHONPATH=$(pwd)/env_pepper/lib/python3.9/site-packages Install Pepper and required packages: python -m ensurepip --upgrade python -m pip install -r pip_requirements.txt python -m pip install --upgrade-strategy only-if-needed --editable . Replace with: ssh://git@gitlab.cern.ch:7999/cmsdas-cern-2024/long-ex-top-xsec.git or https://gitlab.cern.ch/cmsdas-cern-2024/long-ex-top-xsec.git Test the Pepper installation: cd example python3 -m pepper.runproc example_processor.py test_config.hjson -d Setting Up the Environment To simplify the setup in new sessions: Copy the example/environment.sh file to a personal script: cp example/environment.sh my_environment.sh Edit my_environment.sh to include the Python environment and Pepper repository directory. Uncomment the relevant lines. Run the script in new sessions: source my_environment.sh Installing Combine We don't really \"use CMSSW\" in this exercise since we use Run-III datasets, but we use the standard CMS statistical fitting tool combine, which is usually installed within a CMSSW environment. Follow the instructions below if you do not have an installed version from a previous exercise. This should be done in a fresh LXplus session. The Combine fitting tool is used for statistical analysis. Follow these steps for installation: Use CMSSW version CMSSW_14_1_0_pre4: source /cvmfs/cms.cern.ch/cmsset_default.sh cmsrel CMSSW_14_1_0_pre4 cd CMSSW_14_1_0_pre4/src cmsenv git clone https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit.git HiggsAnalysis/CombinedLimit cd HiggsAnalysis/CombinedLimit git fetch origin git checkout v10.0.0 scramv1 b clean; scramv1 b -j 8 Use a separate terminal for Combine due to CMSSW-specific environment variables: cd src/ cmsenv Combine is now ready to use. CombineHarvester As of v10, the \"CombineTool\" scripts needed to make impact plots are included in the main combine installation, so a separate installation of CombineHarvester is not needed for this exercise. Currently, if you want to use CombineHarvester for its other features beyond those provided in the \"combineTool\" scripts, you will need to run it using a container (el7 or similar)","title":"Pre-exercise"},{"location":"pre-exercise/#pre-exercise","text":"This section provides the preliminary steps to set up the environment for the CMSDAS 2024 exercises. Follow these instructions carefully to ensure a smooth analysis workflow.","title":"Pre-Exercise"},{"location":"pre-exercise/#pre-requisites","text":"Two installations are required to complete the exercises: Pepper Analysis Framework Combine Fitting Tool","title":"Pre-requisites"},{"location":"pre-exercise/#installing-pepper","text":"We use a special fork of the Pepper analysis framework for this exercise. Follow these steps: Clone the repository and set up the environment: git clone <repository_url> pepper cd pepper source example/environment.sh Create a Python virtual environment: python -m venv env_pepper source env_pepper/bin/activate export PYTHONPATH=$(pwd)/env_pepper/lib/python3.9/site-packages Install Pepper and required packages: python -m ensurepip --upgrade python -m pip install -r pip_requirements.txt python -m pip install --upgrade-strategy only-if-needed --editable . Replace with: ssh://git@gitlab.cern.ch:7999/cmsdas-cern-2024/long-ex-top-xsec.git or https://gitlab.cern.ch/cmsdas-cern-2024/long-ex-top-xsec.git Test the Pepper installation: cd example python3 -m pepper.runproc example_processor.py test_config.hjson -d","title":"Installing Pepper"},{"location":"pre-exercise/#setting-up-the-environment","text":"To simplify the setup in new sessions: Copy the example/environment.sh file to a personal script: cp example/environment.sh my_environment.sh Edit my_environment.sh to include the Python environment and Pepper repository directory. Uncomment the relevant lines. Run the script in new sessions: source my_environment.sh","title":"Setting Up the Environment"},{"location":"pre-exercise/#installing-combine","text":"We don't really \"use CMSSW\" in this exercise since we use Run-III datasets, but we use the standard CMS statistical fitting tool combine, which is usually installed within a CMSSW environment. Follow the instructions below if you do not have an installed version from a previous exercise. This should be done in a fresh LXplus session. The Combine fitting tool is used for statistical analysis. Follow these steps for installation: Use CMSSW version CMSSW_14_1_0_pre4: source /cvmfs/cms.cern.ch/cmsset_default.sh cmsrel CMSSW_14_1_0_pre4 cd CMSSW_14_1_0_pre4/src cmsenv git clone https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit.git HiggsAnalysis/CombinedLimit cd HiggsAnalysis/CombinedLimit git fetch origin git checkout v10.0.0 scramv1 b clean; scramv1 b -j 8 Use a separate terminal for Combine due to CMSSW-specific environment variables: cd src/ cmsenv Combine is now ready to use.","title":"Installing Combine"},{"location":"pre-exercise/#combineharvester","text":"As of v10, the \"CombineTool\" scripts needed to make impact plots are included in the main combine installation, so a separate installation of CombineHarvester is not needed for this exercise. Currently, if you want to use CombineHarvester for its other features beyond those provided in the \"combineTool\" scripts, you will need to run it using a container (el7 or similar)","title":"CombineHarvester"}]}